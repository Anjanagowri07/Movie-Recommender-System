# -*- coding: utf-8 -*-
"""movie-recommender-systems.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TwnGh1XdtbQxKhWazpLpc5BfW5Rse0ck

# Movies Recommender System
"""

from google.colab import drive
drive.mount('/content/drive')

"""![](http://labs.criteo.com/wp-content/uploads/2017/08/CustomersWhoBought3.jpg)"""

!unzip /content/drive/MyDrive/Recsystem/movies_metadata.csv.zip

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np


import warnings; warnings.simplefilter('ignore')

movie_filter = pd.read_csv('/content/drive/MyDrive/Recsystem/links_small.csv')
movie_filter = movie_filter[movie_filter['tmdbId'].notnull()]['tmdbId'].astype('int')

movies = pd.read_csv('/content/movies_metadata.csv')
movies.head()

movies.shape

movies.info()

movies['revenue'].value_counts(ascending=False)

movies['budget'] = pd.to_numeric(movies['budget'], errors='coerce')
movies['budget'].value_counts(ascending=False)

movies['adult'].value_counts()

movies.drop('adult', axis=1)

from ast import literal_eval

def extract_franchise_name(data):
  if isinstance(data, dict):
    return data['name']
  else:
    return np.nan

movie_franchises = movies[movies['belongs_to_collection'].notnull()]
movie_franchises['belongs_to_collection'] = movie_franchises['belongs_to_collection'].apply(literal_eval).apply(extract_franchise_name)
movie_franchises = movie_franchises[movie_franchises['belongs_to_collection'].notnull()]

revenues_by_franchise = movie_franchises.pivot_table(index='belongs_to_collection', values='revenue', aggfunc={'revenue': ['mean', 'sum', 'count']}).reset_index()
revenues_by_franchise.sort_values('sum', ascending=False).head(10)

budget_by_franchise = movie_franchises.pivot_table(index='belongs_to_collection', values='budget', aggfunc={'budget': ['mean', 'sum', 'count']}).reset_index()
budget_by_franchise.sort_values('sum', ascending=False).head(10)

invalid_indices = movies[movies['imdb_id'] == '0'].index
movies = movies.drop(invalid_indices, axis=0)
movies['id'] = movies['id'].astype('int')

movies = movies[movies['id'].isin(movie_filter)]
list(movies.columns.values)

movies['tagline'] = movies['tagline'].fillna('')
movies['overview'] = movies['overview'].fillna('')
movies['description'] = movies[['tagline', 'overview']].agg(' '.join, axis=1)

from sklearn.feature_extraction.text import TfidfVectorizer

tf_idf_vectorizer = TfidfVectorizer(stop_words='english')
tf_idf_matrix = tf_idf_vectorizer.fit_transform(movies['description'])

tf_idf_matrix.shape

from sklearn.metrics.pairwise import linear_kernel

cos_similarity = linear_kernel(tf_idf_matrix, tf_idf_matrix)
cos_similarity.shape

cos_similarity[0:5]

movies = movies.reset_index()

from operator import itemgetter

def recommend_movies_on_similarity(movies, title, movie_count):
    movie_indices = recommend_indices_on_similarity(movies, title, movie_count)
    return movies.iloc[movie_indices]['title']

def recommend_indices_on_similarity(movies, title, movie_count):
    idx = movies[movies['title'] == title].index[0]
    cos_similarity_title = list(enumerate(cos_similarity[idx]))
    cos_similarity_title = sorted(cos_similarity_title, key=itemgetter(1), reverse=True)
    movie_indices = [i[0] for i in cos_similarity_title[1:movie_count]]
    return movie_indices

recommend_movies_on_similarity(movies, 'Fury', 10)

recommend_movies_on_similarity(movies, 'Ice Age', 10)

def clean_and_get_int_col_data(df, col_name):
    return df[df[col_name].notnull()][col_name].astype('int')

def convert_col_to_int(df, col_name):
    df[col_name] = df[col_name].astype('int')

def filter_well_rate_movies(movies, min_vote_count):
    filtered_movies = movies[(movies['vote_count'] >= min_vote_count) & (movies['vote_count'].notnull()) & (movies['vote_average'].notnull())]
    convert_col_to_int(filtered_movies, 'vote_count')
    convert_col_to_int(filtered_movies, 'vote_average')
    return filtered_movies

def recommend_movies_on_similarity_and_rating(movies, title, movie_count):
    movie_indices = recommend_indices_on_similarity(movies, title, 50)
    
    movies_trimmed = movies.iloc[movie_indices][['title', 'vote_count', 'vote_average']]
    vote_count_int = clean_and_get_int_col_data(movies_trimmed, 'vote_count')
    vote_avg_int = clean_and_get_int_col_data(movies_trimmed, 'vote_average')
    C = vote_avg_int.mean()
    m = vote_count_int.quantile(0.65)
    filtered_movies = filter_well_rate_movies(movies_trimmed, m)
    filtered_movies['wr'] = filtered_movies.apply(lambda x: (x['vote_count']/(x['vote_count']+m) * x['vote_average']) + (m/(m+x['vote_count']) * C), axis=1)
    filtered_movies = filtered_movies.sort_values('wr', ascending=False).head(movie_count)
    return filtered_movies

recommend_movies_on_similarity_and_rating(movies, 'House Arrest', 10)

recommend_movies_on_similarity_and_rating(movies, 'Toy Story', 10)